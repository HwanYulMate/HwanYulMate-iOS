//
//  WithdrawlViewController.swift
//  HwanYulMate
//
//  Created by HanJW on 9/5/25.
//

import UIKit
import IQKeyboardManagerSwift
import RxSwift
import GoogleSignIn
import Alamofire

final class WithdrawalViewController: UIViewController {
    
    // MARK: - properties
    private let withdrawalView = WithdrawalView()
    private let disposeBag = DisposeBag()
    
    // MARK: - life cycles
    override func loadView() {
        view = withdrawalView
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupActions()
        setupTextView()
        setupKeyboardManager()
        loadUserNameFromAPI()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(true, animated: animated)
        tabBarController?.tabBar.isHidden = true
        
        IQKeyboardManager.shared.isEnabled = true
        IQKeyboardManager.shared.enableAutoToolbar = true
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        navigationController?.setNavigationBarHidden(true, animated: animated)
        tabBarController?.tabBar.isHidden = false
        
        IQKeyboardManager.shared.isEnabled = true
        IQKeyboardManager.shared.enableAutoToolbar = true
    }
    
    // MARK: - methods (setting up)
    private func setupActions() {
        withdrawalView.backButton.addTarget(
            self,
            action: #selector(backButtonTapped),
            for: .touchUpInside
        )
        
        withdrawalView.cancelButton.addTarget(
            self,
            action: #selector(cancelButtonTapped),
            for: .touchUpInside
        )
        
        withdrawalView.withdrawButton.addTarget(
            self,
            action: #selector(withdrawButtonTapped),
            for: .touchUpInside
        )
    }
    
    private func setupTextView() {
        withdrawalView.reasonTextView.delegate = self
        
        let toolbar = UIToolbar()
        toolbar.sizeToFit()
        
        let doneButton = UIBarButtonItem(
            title: "ÏôÑÎ£å",
            style: .done,
            target: self,
            action: #selector(doneButtonTapped)
        )
        
        let flexSpace = UIBarButtonItem(
            barButtonSystemItem: .flexibleSpace,
            target: nil,
            action: nil
        )
        
        toolbar.items = [flexSpace, doneButton]
        withdrawalView.reasonTextView.inputAccessoryView = toolbar
    }
    
    private func setupKeyboardManager() {
        IQKeyboardManager.shared.isEnabled = true
        IQKeyboardManager.shared.enableAutoToolbar = false
        IQKeyboardManager.shared.resignOnTouchOutside = true
    }
    
    private func loadUserNameFromAPI() {
        print("üîç [Withdrawal] ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ Î°úÎìú ÏãúÏûë")
        
        /// 1Ï∞®: UserInfoManager Ï∫êÏãúÏóêÏÑú ÌôïÏù∏
        if let cachedUserInfo = UserInfoManager.shared.getCachedUserInfo() {
            print("‚úÖ [Withdrawal] Ï∫êÏãúÏóêÏÑú ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ Î∞úÍ≤¨: \(cachedUserInfo.userName)")
            withdrawalView.updateUserName(cachedUserInfo.userName)
            return
        }
        
        /// 2Ï∞®: UserDefaultsÏóêÏÑú ÌôïÏù∏
        let localUserName = UserInfoManager.shared.getUserName()
        if !localUserName.isEmpty {
            print("‚úÖ [Withdrawal] Î°úÏª¨ÏóêÏÑú ÏÇ¨Ïö©Ïûê Ïù¥Î¶Ñ Î∞úÍ≤¨: \(localUserName)")
            withdrawalView.updateUserName(localUserName)
            return
        }
        
        /// 3Ï∞®: APIÏóêÏÑú Í∞ÄÏ†∏Ïò§Í∏∞
        print("üîç [Withdrawal] APIÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Îäî Ï§ë...")
        UserInfoManager.shared.fetchUserInfo()
            .observe(on: MainScheduler.instance)
            .subscribe(
                onSuccess: { [weak self] userInfo in
                    print("‚úÖ [Withdrawal] APIÏóêÏÑú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÑ±Í≥µ: \(userInfo.userName)")
                    self?.withdrawalView.updateUserName(userInfo.userName)
                },
                onFailure: { [weak self] error in
                    print("‚ùå [Withdrawal] ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®: \(error)")
                    // Ïã§Ìå® ÏãúÏóêÎèÑ Í∏∞Î≥∏ ÌÖçÏä§Ìä∏Î°ú ÌëúÏãú
                    self?.withdrawalView.updateUserName("")
                }
            )
            .disposed(by: disposeBag)
    }
    
    // MARK: - methods (action)
    @objc private func backButtonTapped() {
        navigationController?.popViewController(animated: true)
    }
    
    @objc private func cancelButtonTapped() {
        navigationController?.popViewController(animated: true)
    }
    
    @objc private func withdrawButtonTapped() {
        showWithdrawalConfirmation()
    }
    
    @objc private func doneButtonTapped() {
        view.endEditing(true)
    }
    
    private func showWithdrawalConfirmation() {
        let alert = UIAlertController(
            title: "ÌöåÏõêÌÉàÌá¥",
            message: "Ï†ïÎßêÎ°ú ÌÉàÌá¥ÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÌÉàÌá¥ ÌõÑÏóêÎäî Î™®Îì† Îç∞Ïù¥ÌÑ∞Í∞Ä ÏÇ≠Ï†úÎêòÎ©∞ Î≥µÍµ¨Ìï† Ïàò ÏóÜÏäµÎãàÎã§.",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "Ï∑®ÏÜå", style: .cancel))
        alert.addAction(UIAlertAction(title: "ÌÉàÌá¥", style: .destructive) { [weak self] _ in
            self?.performWithdrawalAPI()
        })
        
        present(alert, animated: true)
    }
    
    private func performWithdrawalAPI() {
        print("üîç [Withdrawal] ÌöåÏõêÌÉàÌá¥ API Ìò∏Ï∂ú ÏãúÏûë")
        
        withdrawalView.withdrawButton.isEnabled = false
        
        let reason = withdrawalView.reasonTextView.text?.trimmingCharacters(in: .whitespacesAndNewlines)
        print("üîç [Withdrawal] ÌÉàÌá¥ ÏÇ¨Ïú†: \(reason ?? "ÏóÜÏùå")")
        
        /// ÌòÑÏû¨ ÌÜ†ÌÅ∞ ÏÉÅÌÉú ÌôïÏù∏
        let accessToken = UserDefaults.standard.string(forKey: "access")
        print("üîç [Withdrawal] Access Token ÏÉÅÌÉú: \(accessToken != nil ? "Ï°¥Ïû¨ (Í∏∏Ïù¥: \(accessToken!.count))" : "ÏóÜÏùå")")
        
        ProfileNetworkService.shared.withdrawAccount(reason: reason)
            .observe(on: MainScheduler.instance)
            .subscribe(
                onSuccess: { [weak self] message in
                    print("‚úÖ [Withdrawal] API ÏÑ±Í≥µ: \(message)")
                    self?.handleWithdrawalSuccess(message: message)
                },
                onFailure: { [weak self] error in
                    print("‚ùå [Withdrawal] API Ïã§Ìå®: \(error)")
                    print("‚ùå [Withdrawal] ÏóêÎü¨ ÌÉÄÏûÖ: \(type(of: error))")
                    self?.handleWithdrawalError(error)
                }
            )
            .disposed(by: disposeBag)
    }
    
    private func handleWithdrawalSuccess(message: String) {
        print("‚úÖ [Withdrawal] ÌöåÏõêÌÉàÌá¥ ÏÑ±Í≥µ: \(message)")
        
        /// Î™®Îì† ÌÜ†ÌÅ∞ Î∞è ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ ÏÇ≠Ï†ú
        let userDefaults = UserDefaults.standard
        
        /// AuthLocalDataSourceÏôÄ ÎèôÏùºÌïú ÌÇ§ ÏÇ¨Ïö©
        userDefaults.removeObject(forKey: "access")
        userDefaults.removeObject(forKey: "refresh")
        userDefaults.removeObject(forKey: "name")
        userDefaults.removeObject(forKey: "email")
        userDefaults.removeObject(forKey: "provider")
        
        /// UserInfoManager Ï∫êÏãú Ï†ïÎ¶¨
        UserInfoManager.shared.clearUserInfo()
        
        /// Í∏∞ÌÉÄ Í∞ÄÎä•Ìïú ÌÇ§Îì§ÎèÑ Ï†ïÎ¶¨ (ÏïàÏ†ÑÏû•Ïπò)
        let possibleKeys = [
            "accessToken", "access_token", "ACCESS_TOKEN",
            "refreshToken", "refresh_token", "REFRESH_TOKEN",
            "isLoggedIn", "user_id", "userId"
        ]
        
        for key in possibleKeys {
            userDefaults.removeObject(forKey: key)
        }
        
        userDefaults.synchronize()
        
        GIDSignIn.sharedInstance.signOut()
        
        print("‚úÖ [Withdrawal] Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ Ï†ïÎ¶¨ ÏôÑÎ£å")
        
        let alert = UIAlertController(
            title: "ÌÉàÌá¥ Ï≤òÎ¶¨ ÏôÑÎ£å",
            message: message,
            preferredStyle: .alert
        )
        alert.addAction(UIAlertAction(title: "ÌôïÏù∏", style: .default) { [weak self] _ in
            /// ÎßàÏù¥ ÌÉ≠ÏúºÎ°ú Ïù¥Îèô
            self?.navigateToMyTab()
        })
        present(alert, animated: true)
    }
    
    // MARK: - methods (navigation)
    private func navigateToMyTab() {
        print("üîç [Withdrawal] ÎßàÏù¥ ÌÉ≠ÏúºÎ°ú Ïù¥Îèô")
        
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            
            if let tabBarController = self.findTabBarController() {
                tabBarController.selectedIndex = 2 // ÎßàÏù¥ ÌÉ≠ (tag: 2)
                
                if let navigationController = tabBarController.selectedViewController as? UINavigationController {
                    navigationController.popToRootViewController(animated: false)
                }
                
                print("‚úÖ [Withdrawal] ÎßàÏù¥ ÌÉ≠ÏúºÎ°ú Ïù¥Îèô ÏôÑÎ£å")
            } else {
                print("‚ùå [Withdrawal] TabBarControllerÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏùå")
                self.navigationController?.popToRootViewController(animated: true)
            }
        }
    }
    
    private func findTabBarController() -> UITabBarController? {
        if let tabBarController = self.tabBarController {
            return tabBarController
        }
        
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
           let window = windowScene.windows.first,
           let tabBarController = window.rootViewController as? UITabBarController {
            return tabBarController
        }
        
        return nil
    }
    
    // MARK: - methods (error handling)
    private func handleWithdrawalError(_ error: Error) {
        withdrawalView.withdrawButton.isEnabled = true
        
        print("‚ùå [Withdrawal] ÏóêÎü¨ ÏÉÅÏÑ∏ Î∂ÑÏÑù:")
        print("   - Error: \(error)")
        print("   - LocalizedDescription: \(error.localizedDescription)")
        
        /// Alamofire ÏóêÎü¨ Î∂ÑÏÑù
        if let afError = error as? AFError {
            print("   - AFError Type: \(afError)")
            
            switch afError {
            case .responseValidationFailed(let reason):
                switch reason {
                case .unacceptableStatusCode(let code):
                    print("   - HTTP Status Code: \(code)")
                    handleHTTPError(statusCode: code)
                    return
                default:
                    print("   - Validation Failed: \(reason)")
                }
                
            case .sessionTaskFailed(let sessionError):
                print("   - Session Error: \(sessionError)")
                if let urlError = sessionError as? URLError {
                    switch urlError.code {
                    case .notConnectedToInternet:
                        showNetworkErrorAlert()
                        return
                    case .timedOut:
                        showTimeoutErrorAlert()
                        return
                    default:
                        break
                    }
                }
                
            default:
                print("   - Other AFError: \(afError)")
            }
        }
        
        showGenericWithdrawalError(error)
    }
    
    private func handleHTTPError(statusCode: Int) {
        switch statusCode {
        case 401:
            showTokenExpiredAlert()
        case 403:
            showPermissionDeniedAlert()
        case 404:
            showAPINotFoundAlert()
        case 400:
            showBadRequestAlert()
        case 500...599:
            showServerErrorAlert()
        default:
            showGenericWithdrawalError(AFError.responseValidationFailed(reason: .unacceptableStatusCode(code: statusCode)))
        }
    }

    private func showTokenExpiredAlert() {
        let alert = UIAlertController(
            title: "Ïù∏Ï¶ù ÎßåÎ£å",
            message: "Î°úÍ∑∏Ïù∏Ïù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§.\nÎßàÏù¥ ÌÉ≠ÏúºÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "ÌôïÏù∏", style: .default) { [weak self] _ in
            self?.navigateToMyTab()
        })
        
        present(alert, animated: true)
    }

    private func showPermissionDeniedAlert() {
        let alert = UIAlertController(
            title: "Í∂åÌïú Ïò§Î•ò",
            message: "ÌöåÏõêÌÉàÌá¥ Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.\nÎßàÏù¥ ÌÉ≠ÏúºÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "ÌôïÏù∏", style: .default) { [weak self] _ in
            self?.navigateToMyTab()
        })
        
        present(alert, animated: true)
    }

    private func showAPINotFoundAlert() {
        let alert = UIAlertController(
            title: "ÏÑúÎπÑÏä§ Ïò§Î•ò",
            message: "ÌÉàÌá¥ ÏÑúÎπÑÏä§Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.\nÏû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "ÌôïÏù∏", style: .default))
        
        present(alert, animated: true)
    }

    private func showBadRequestAlert() {
        let alert = UIAlertController(
            title: "ÌÉàÌá¥ Ï≤òÎ¶¨ ÏïàÎÇ¥",
            message: "Ïù¥ÎØ∏ ÌÉàÌá¥ Ï≤òÎ¶¨ Ï§ëÏù∏ Í≥ÑÏ†ïÏùº Ïàò ÏûàÏäµÎãàÎã§.\n\n‚Ä¢ 30Ïùº ÎÇ¥ Ïû¨Í∞ÄÏûÖÌïú Í≤ΩÏö∞ Ïù¥Ï†Ñ ÌÉàÌá¥ Ï≤òÎ¶¨Í∞Ä Ïú†ÏßÄÎê©ÎãàÎã§\n‚Ä¢ Î°úÍ∑∏ÏïÑÏõÉÏùÑ ÏõêÌïòÏãúÎ©¥ 'Î°úÍ∑∏ÏïÑÏõÉ'ÏùÑ ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "Î°úÍ∑∏ÏïÑÏõÉ", style: .destructive) { [weak self] _ in
            self?.navigateToLogoutScreen()
        })
        
        alert.addAction(UIAlertAction(title: "Îã§Ïãú ÏãúÎèÑ", style: .default) { [weak self] _ in
            self?.performWithdrawalAPI()
        })
        
        alert.addAction(UIAlertAction(title: "Ï∑®ÏÜå", style: .cancel))
        
        present(alert, animated: true)
    }

    private func navigateToLogoutScreen() {
        let logoutVC = LogoutViewController()
        navigationController?.pushViewController(logoutVC, animated: true)
    }

    private func showServerErrorAlert() {
        let alert = UIAlertController(
            title: "ÏÑúÎ≤Ñ Ïò§Î•ò",
            message: "ÏÑúÎ≤ÑÏóê ÏùºÏãúÏ†ÅÏù∏ Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.\nÏû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "Îã§Ïãú ÏãúÎèÑ", style: .default) { [weak self] _ in
            self?.performWithdrawalAPI()
        })
        
        alert.addAction(UIAlertAction(title: "Ï∑®ÏÜå", style: .cancel))
        
        present(alert, animated: true)
    }

    private func showNetworkErrorAlert() {
        let alert = UIAlertController(
            title: "ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò",
            message: "Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "Îã§Ïãú ÏãúÎèÑ", style: .default) { [weak self] _ in
            self?.performWithdrawalAPI()
        })
        
        alert.addAction(UIAlertAction(title: "Ï∑®ÏÜå", style: .cancel))
        
        present(alert, animated: true)
    }

    private func showTimeoutErrorAlert() {
        let alert = UIAlertController(
            title: "ÏöîÏ≤≠ ÏãúÍ∞Ñ Ï¥àÍ≥º",
            message: "ÏÑúÎ≤Ñ ÏùëÎãµÏù¥ ÏßÄÏó∞ÎêòÍ≥† ÏûàÏäµÎãàÎã§.\nÎã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "Îã§Ïãú ÏãúÎèÑ", style: .default) { [weak self] _ in
            self?.performWithdrawalAPI()
        })
        
        alert.addAction(UIAlertAction(title: "Ï∑®ÏÜå", style: .cancel))
        
        present(alert, animated: true)
    }

    private func showGenericWithdrawalError(_ error: Error) {
        let alert = UIAlertController(
            title: "ÌÉàÌá¥ Ïã§Ìå®",
            message: "ÌöåÏõêÌÉàÌá¥ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.\n(\(error.localizedDescription))\n\nÎã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.",
            preferredStyle: .alert
        )
        
        alert.addAction(UIAlertAction(title: "Îã§Ïãú ÏãúÎèÑ", style: .default) { [weak self] _ in
            self?.performWithdrawalAPI()
        })
        
        alert.addAction(UIAlertAction(title: "Ï∑®ÏÜå", style: .cancel))
        
        present(alert, animated: true)
    }
}

extension WithdrawalViewController: UITextViewDelegate {
    
    func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool {
        let currentText = textView.text ?? ""
        guard let stringRange = Range(range, in: currentText) else { return false }
        let updatedText = currentText.replacingCharacters(in: stringRange, with: text)
        
        if updatedText.count > 100 {
            return false
        }
        
        return true
    }
    
    func textViewDidChange(_ textView: UITextView) {
        let count = textView.text.count
        withdrawalView.updateCharCount(count)
    }
}
